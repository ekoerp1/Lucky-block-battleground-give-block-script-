-- StarterPlayerScript
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

-- Function to clean up existing GUI
local function cleanupExistingGui()
    local existingGui = playerGui:FindFirstChild("LuckyBlockGui")
    if existingGui then
        existingGui:Destroy()
    end
end

-- Clean up any existing GUI before creating a new one
cleanupExistingGui()

-- Create the ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LuckyBlockGui"
screenGui.Parent = playerGui

-- Create a Frame to hold the buttons and title
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.3, 0, 0.5, 0)
frame.Position = UDim2.new(0.35, 0, 0.25, 0)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background (default dark mode)
frame.ClipsDescendants = true
frame.Parent = screenGui

-- Create a title label
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, -60, 0, 30) -- Adjust size to make room for the collapse and mode buttons
titleLabel.Position = UDim2.new(0, 0, 0, 0)
titleLabel.Text = "Lucky Block Giver"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color (default dark mode)
titleLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark gray background for the title bar
titleLabel.TextScaled = true
titleLabel.TextXAlignment = Enum.TextXAlignment.Left -- Align text to the left
titleLabel.Parent = frame

-- Create a collapse button
local collapseButton = Instance.new("TextButton")
collapseButton.Size = UDim2.new(0, 30, 0, 30)
collapseButton.Position = UDim2.new(1, -30, 0, 0)
collapseButton.Text = "-"
collapseButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Dark gray button background
collapseButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
collapseButton.Parent = frame

-- Create a mode toggle button
local modeToggleButton = Instance.new("TextButton")
modeToggleButton.Size = UDim2.new(0, 30, 0, 30)
modeToggleButton.Position = UDim2.new(1, -60, 0, 0)
modeToggleButton.Text = "ðŸŒ™" -- Moon icon for dark mode
modeToggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Dark gray button background
modeToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
modeToggleButton.Parent = frame

-- Create a Frame to hold the buttons
local buttonFrame = Instance.new("Frame")
buttonFrame.Size = UDim2.new(1, 0, 1, -30) -- Adjust to fit below the title bar
buttonFrame.Position = UDim2.new(0, 0, 0, 30)
buttonFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background (default dark mode)
buttonFrame.ClipsDescendants = true
buttonFrame.Parent = frame

-- Create a UIListLayout to organize the buttons
local layout = Instance.new("UIListLayout")
layout.Padding = UDim.new(0, 5)
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Parent = buttonFrame

-- Create a ScrollingFrame for the buttons
local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Size = UDim2.new(1, 0, 1, 0)
scrollingFrame.BackgroundTransparency = 1
scrollingFrame.CanvasSize = UDim2.new(0, 0, 2, 0) -- Adjust to fit all buttons
scrollingFrame.ScrollBarThickness = 10
scrollingFrame.Parent = buttonFrame

-- Move UIListLayout to ScrollingFrame
layout.Parent = scrollingFrame

-- Function to create buttons
local function createButton(name, scriptFunction)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -10, 0, 50) -- Adjust size for compact layout
    button.Position = UDim2.new(0, 5, 0, 5) -- Add padding
    button.Text = name
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark gray button background (default dark mode)
    button.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
    button.Parent = scrollingFrame
    
    -- Add button click functionality
    button.MouseButton1Click:Connect(function()
        scriptFunction()
    end)
end

-- Define script functions for each block type
local function normalBlockScript()
    local spawnLuckyBlockEvent = ReplicatedStorage:WaitForChild("SpawnLuckyBlock")
    spawnLuckyBlockEvent:FireServer()
end

local function superBlockScript()
    local spawnSuperBlockEvent = ReplicatedStorage:WaitForChild("SpawnSuperBlock")
    spawnSuperBlockEvent:FireServer()
end

local function diamondBlockScript()
    local spawnDiamondBlockEvent = ReplicatedStorage:WaitForChild("SpawnDiamondBlock")
    spawnDiamondBlockEvent:FireServer()
end

local function rainbowBlockScript()
    local spawnRainbowBlockEvent = ReplicatedStorage:WaitForChild("SpawnRainbowBlock")
    spawnRainbowBlockEvent:FireServer()
end

local function galaxyBlockScript()
    local spawnGalaxyBlockEvent = ReplicatedStorage:WaitForChild("SpawnGalaxyBlock")
    spawnGalaxyBlockEvent:FireServer()
end

-- Add buttons for each lucky block
createButton("Normal Block", normalBlockScript)
createButton("Super Block", superBlockScript)
createButton("Diamond Block", diamondBlockScript)
createButton("Rainbow Block", rainbowBlockScript)
createButton("Galaxy Block", galaxyBlockScript)

-- Add a collapsed text label
local collapsedLabel = Instance.new("TextLabel")
collapsedLabel.Size = UDim2.new(1, 0, 1, 0)
collapsedLabel.Position = UDim2.new(0, 0, 0, 0)
collapsedLabel.Text = "Collapsed"
collapsedLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
collapsedLabel.BackgroundTransparency = 1
collapsedLabel.TextScaled = true
collapsedLabel.TextStrokeTransparency = 0.5 -- Optional: add a text stroke for better visibility
collapsedLabel.Parent = frame
collapsedLabel.Visible = false -- Initially hidden

-- Collapse functionality
local collapsed = false

local function collapse()
    if collapsed then
        frame.Size = UDim2.new(0.3, 0, 0.5, 0)
        titleLabel.Visible = true
        buttonFrame.Visible = true
        collapsedLabel.Visible = false
        collapseButton.Text = "-"
    else
        frame.Size = UDim2.new(0.3, 0, 0, 30) -- Collapse to only show the title and collapse button
        titleLabel.Visible = false
        buttonFrame.Visible = false
        collapsedLabel.Visible = true
        collapseButton.Text = "+"
    end
    collapsed = not collapsed
end

collapseButton.MouseButton1Click:Connect(collapse)

-- Dark and Light mode toggle functionality
local darkMode = true

local function toggleMode()
    if darkMode then
        -- Switch to Light Mode
        frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- White background
        titleLabel.BackgroundColor3 = Color3.fromRGB(200, 200, 200) -- Light gray background for title
        titleLabel.TextColor3 = Color3.fromRGB(0, 0, 0) -- Black text color
        buttonFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- White background for buttons
        modeToggleButton.Text = "ðŸŒ™" -- Moon icon for dark mode
        collapseButton.BackgroundColor3 = Color3.fromRGB(200, 200, 200) -- Light gray button background
        collapseButton.TextColor3 = Color3.fromRGB(0, 0, 0) -- Black text color

        -- Update button colors in light mode
        for _, button in ipairs(scrollingFrame:GetChildren()) do
            if button:IsA("TextButton") then
                button.BackgroundColor3 = Color3.fromRGB(200, 200, 200) -- Light gray button background
                button.TextColor3 = Color3.fromRGB(0, 0, 0) -- Black text color
            end
        end

        darkMode = false
    else
                titleLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark gray background for title
        titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
        buttonFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background for buttons
        modeToggleButton.Text = "ðŸŒ•" -- Sun icon for light mode
        collapseButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Dark gray button background
        collapseButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color

        -- Update button colors in dark mode
        for _, button in ipairs(scrollingFrame:GetChildren()) do
            if button:IsA("TextButton") then
                button.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark gray button background
                button.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color
            end
        end

        darkMode = true
    end
end

modeToggleButton.MouseButton1Click:Connect(toggleMode)

-- Dragging functionality
local dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

local function onInputBegan(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        if input.Target == frame or frame:IsAncestorOf(input.Target) then
            dragInput = input
            dragStart = input.Position
            startPos = frame.Position

            -- Connect update function to input
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragInput = nil
                end
            end)
        end
    end
end

local function onInputChanged(input)
    if input == dragInput then
        update(input)
    end
end

-- Connect input events for dragging
UserInputService.InputBegan:Connect(onInputBegan)
UserInputService.InputChanged:Connect(onInputChanged)
